<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="t_the_promise_of_dita_xml" xml:lang="en">
    <title>The Promise Of DITA XML</title>
    
    <body>
        <section>
            <title><i>Why-Not</i> Word-like Applications?</title>
            <p>The real-problem with Microsoft Word-like applications is that they pretend to do two
                jobs at once and do neither very-well. They pretend to be both creation-layer and
                presentation-layer tools - that is - we're expected to use them to the create
                content and the presentation of the content. This is why we (as content creators)
                spend more-time than we should wrestling with the presentation-layer (trying to keep
                our documents looking the way we want them to look) rather than focusing entirely on
                creating content.</p>
            <p>In the days of the typewriter, content creators were functionally, physically, and
                temporally separated from the presentation-layer of the publication process. First,
                it wasn't their job. Second, it <i>was</i> the job of workers in a distant factory.
                Third, it was done after their creation-layer work was done.</p>
            <p>Can you imagine what it would be like to create content and be so-far removed from
                the presentation-layer work that you never have to think about margins, font-family,
                font-size, pagination, page numbers, headers, footers, the table of contents,
                paragraph indentation, numbered lists, or tab-stops ever again?</p>
        </section>

        <section>
            <title><i>Why</i> DITA XML?</title>
            <p>DITA XML is an open standard and format – that means that we can create, read, and
                edit DITA XML content without ‘having to’ use a specific, proprietary software
                application. In fact, we can create and edit any DITA XML document by using the
                simple text editor bundled with our computer operating system.</p>
            <p>Further, the promise of DITA XML includes:</p>
            <dl>
                <dlentry>
                    <dt>Separation of creation-layer from presentation-layer</dt>
                    <dd><p>Creating content in DITA XML is like creating content on a
                            digital-typewriter. As content creators, we work at the creation-layer.
                            We <q id="almost_zero">have almost zero responsibility for how content
                                will look after presentation-layer processing</q> (stick a pin in
                            that 'almost zero' for later). Almost all of that presentation-layer
                            stuff is the responsibility of someone else.</p>
                        <p>This separation is all the more attractive when one realises that our
                            content may be presented by software or on hardware not yet
                            designed.</p>
                    </dd>
                </dlentry>
                <dlentry>
                    <dt>Discrete content</dt>
                    <dd><p>The creation of discrete content encourages content creators to focus on
                            the subject in hand. That, if content is being created about how to
                            commission <i>Product XYZ</i> then the content of the DITA XML file will
                            only be about commissioning that product. It will not contain content
                            about decommissioning the product, nor will it contain content about the
                            benefits of using the product, nor will it contain content about other
                            products in the family.</p></dd>
                </dlentry>
                <dlentry>
                    <dt>Structured content</dt>
                    <dd><p>The creation of structured content (chunked-up into DITA XML elements),
                            ensures that the content is reusable and machine-readable, and as such,
                            open to reuse by any content creator or content processor that can
                            access it.</p></dd>
                </dlentry>
                <dlentry>
                    <dt>Reusable content</dt>
                    <dd><p>The promise of reusable content is that content (with the potential for
                            reuse) can be created as stand-alone pieces that are available to be
                            reused by any team member – further, a good content reuse strategy:</p>
                        <ul>
                            <li>Will facilitate efficient collaboration by including a team-wide
                                naming and identifying convention that ensures all team members know
                                how to create, name, and find reusable content</li>
                            <li>Permits any team member to ‘check out’ a content component file to
                                add a new content component. Once ‘checked-in’, the new content
                                component can be reused by any other team member</li>
                            <li>Permits any team member to ‘check out’ a content component file to
                                update a content component. Once ‘checked-in’ again, the updated
                                content component will be automatically updated in the referring
                                content when its output is regenerated</li>
                        </ul>
                    </dd>
                </dlentry>
                <dlentry>
                    <dt>Machine read-ability</dt>
                    <dd><p>The promise of machine read-ability is that it maximises the value of
                            content by ensuring that the single-source-content about a ‘thing’ will
                            be available to be ‘read’ by any processing application with access.</p>
                        <p>You will understand that modern programming languages include libraries
                            that facilitate the creation of applications capable of ‘reaching into’
                            DITA XML topics to read the content from within elements.</p>
                        <p>This permits the externalisation of code-base content and the user
                            interface text facilitating its availability to be updated and reused
                            while being available to be 'read in' during a build.</p>
                        <p>It also permits the content hosting system to 'know' more about the
                            content it is hosting than it ever could hosting proprietry Word-like
                            document files. Since DITA XML topics are, simply, structured text
                            files, reading the <keyword>metadata</keyword> of any DITA XML file is a
                            trivial action for a hosting system.</p>
                        <div outputclass="lightbulb">
                            <image href="../../ILLUSTRATIONS/lightbulb.png"/>
                            <p>Every DITA XML file can have a <keyword>category</keyword> element -
                                meaning, that every DITA XML file can be categorised independently
                                of any other DITA XML file (BOOKMAP, MAP, or TOPIC) regarless of
                                whether the relationship is that of 'parent', 'sibling', or
                                'child'.</p>
                        </div>
                    </dd>
                </dlentry>
                <dlentry>
                    <dt>Machine write-ability</dt>
                    <dd><p>The promise of machine write-ability is that it maximises the value of
                            code-base content by ensuring that the single-source-content (generated
                            during a build) about a ‘thing’ will be available (externally) to be
                            ‘read’ by any processing application with access.</p>
                        <p>You will understand that modern programming languages include libraries
                            that facilitate the creation of applications capable of writing DITA XML
                            files or ‘reaching into’ DITA XML files to insert content into
                            elements.</p>
                        <p>This permits the seamless publication of code-base content - for example
                            - interface documentation - that can be automatically added to, or
                            update, existing public facing content during a build.</p>
                    </dd>
                </dlentry>
                <dlentry>
                    <dt>Asynchronous collaboration</dt>
                    <dd>In the context of machine-reading and machine-writing, asynchronous
                        collaboration permits team members to work on their 'own thing' without the
                        overhead of communicating every action with the rest of the team. Consider a
                        scenario where a software build system exports machine-written topics about
                        API methods, generating - for example - a topic file named
                            <codeph>t_method_xyz.dita</codeph> while a <keyword>MAP</keyword> file
                        in the documentation system refers to the same topic file. Everytime the
                        software build system runs the documentation process system runs too. If a
                        developer adds a new parameter to the method, the documentation will be
                        updated automatically the next time the build system runs - without anyone
                        else needing to know or be involved.</dd>
                </dlentry>

            </dl>
        </section>
    </body>
</topic>
